// <auto-generated />
using System;
using FPT.TeamMatching.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FPT.TeamMatching.Data.Migrations
{
    [DbContext(typeof(FPTMatchingDbContext))]
    partial class FPTMatchingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillRequired")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.BlogCv", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileCv")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogCv", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CapstoneSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HallName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Stage")
                        .HasColumnType("integer");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CapstoneSchedule", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Idea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Abbreviations")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<string>("EnterpriseName")
                        .HasColumnType("text");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("IdeaCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnterpriseTopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExistedTeam")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StageIdeaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("SubMentorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VietNamName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("StageIdeaId");

                    b.HasIndex("SubMentorId");

                    b.ToTable("Idea", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.IdeaHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("CouncilId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUpdate")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdeaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ReviewStage")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CouncilId");

                    b.HasIndex("IdeaId");

                    b.ToTable("IdeaHistory", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.IdeaHistoryRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdeaHistoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdeaHistoryId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("IdeaHistoryRequest", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.IdeaRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdeaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("IdeaRequest", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invitation", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.MentorIdeaRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdeaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MentorIdeaRequest", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Profession", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.ProfileStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Achievement")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExperienceProject")
                        .HasColumnType("text");

                    b.Property<string>("FileCv")
                        .HasColumnType("text");

                    b.Property<string>("Interest")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQualifiedForAcademicProject")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfileStudent", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdeaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TeamCode")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.Property<int?>("TeamSize")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId")
                        .IsUnique();

                    b.HasIndex("LeaderId");

                    b.HasIndex("UserId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("NumbOfStar")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RateById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RateForId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RateById");

                    b.HasIndex("RateForId");

                    b.ToTable("Rate", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyId")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUpload")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Reviewer1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Reviewer2Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Room")
                        .HasColumnType("text");

                    b.Property<int?>("Slot")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Reviewer1Id");

                    b.HasIndex("Reviewer2Id");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("SemesterCode")
                        .HasColumnType("text");

                    b.Property<string>("SemesterName")
                        .HasColumnType("text");

                    b.Property<string>("SemesterPrefixName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.SkillProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullSkill")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileStudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileStudentId");

                    b.HasIndex("UserId");

                    b.ToTable("SkillProfile", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SpecialtyName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Specialty", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.StageIdea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ResultDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("StageIdea", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LeaveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Cache")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.UserXRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserXRole", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Blog", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("Blogs")
                        .HasForeignKey("ProjectId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.BlogCv", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Blog", "Blog")
                        .WithMany("BlogCvs")
                        .HasForeignKey("BlogId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("BlogCvs")
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CapstoneSchedule", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("CapstoneSchedules")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Comment", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Review", "Review")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ReviewId");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Idea", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Mentor")
                        .WithMany("IdeaOfMentors")
                        .HasForeignKey("MentorId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Owner")
                        .WithMany("IdeaOfOwners")
                        .HasForeignKey("OwnerId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Specialty", "Specialty")
                        .WithMany("Ideas")
                        .HasForeignKey("SpecialtyId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.StageIdea", "StageIdea")
                        .WithMany("Ideas")
                        .HasForeignKey("StageIdeaId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "SubMentor")
                        .WithMany("IdeaOfSubMentors")
                        .HasForeignKey("SubMentorId");

                    b.Navigation("Mentor");

                    b.Navigation("Owner");

                    b.Navigation("Specialty");

                    b.Navigation("StageIdea");

                    b.Navigation("SubMentor");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.IdeaHistory", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Council")
                        .WithMany("IdeaHistoryOfCouncils")
                        .HasForeignKey("CouncilId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Idea", "Idea")
                        .WithMany("IdeaHistories")
                        .HasForeignKey("IdeaId");

                    b.Navigation("Council");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.IdeaHistoryRequest", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.IdeaHistory", "IdeaHistory")
                        .WithMany("IdeaHistoryRequests")
                        .HasForeignKey("IdeaHistoryId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer")
                        .WithMany("IdeaHistoryRequestOfReviewers")
                        .HasForeignKey("ReviewerId");

                    b.Navigation("IdeaHistory");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.IdeaRequest", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Idea", "Idea")
                        .WithMany("IdeaRequests")
                        .HasForeignKey("IdeaId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer")
                        .WithMany("IdeaRequestOfReviewers")
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Idea");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Invitation", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("Invitations")
                        .HasForeignKey("ProjectId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Receiver")
                        .WithMany("InvitationOfReceivers")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Sender")
                        .WithMany("InvitationOfSenders")
                        .HasForeignKey("SenderId");

                    b.Navigation("Project");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Like", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.MentorIdeaRequest", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Idea", "Idea")
                        .WithMany("MentorIdeaRequests")
                        .HasForeignKey("IdeaId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("MentorIdeaRequests")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Idea");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Notification", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.ProfileStudent", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Semester", "Semester")
                        .WithMany("ProfileStudents")
                        .HasForeignKey("SemesterId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Specialty", "Specialty")
                        .WithMany("ProfileStudents")
                        .HasForeignKey("SpecialtyId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithOne("ProfileStudent")
                        .HasForeignKey("FPT.TeamMatching.Domain.Entities.ProfileStudent", "UserId");

                    b.Navigation("Semester");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Project", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Idea", "Idea")
                        .WithOne("Project")
                        .HasForeignKey("FPT.TeamMatching.Domain.Entities.Project", "IdeaId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Leader")
                        .WithMany("Projects")
                        .HasForeignKey("LeaderId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", null)
                        .WithMany("ProjectOfLeaders")
                        .HasForeignKey("UserId");

                    b.Navigation("Idea");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Rate", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.TeamMember", "RateBy")
                        .WithMany("RateBys")
                        .HasForeignKey("RateById");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.TeamMember", "RateFor")
                        .WithMany("RateFors")
                        .HasForeignKey("RateForId");

                    b.Navigation("RateBy");

                    b.Navigation("RateFor");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Review", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("Reviews")
                        .HasForeignKey("ProjectId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer1")
                        .WithMany("Reviewer1s")
                        .HasForeignKey("Reviewer1Id");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer2")
                        .WithMany("Reviewer2s")
                        .HasForeignKey("Reviewer2Id");

                    b.Navigation("Project");

                    b.Navigation("Reviewer1");

                    b.Navigation("Reviewer2");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.SkillProfile", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.ProfileStudent", "ProfileStudent")
                        .WithMany("SkillProfiles")
                        .HasForeignKey("ProfileStudentId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", null)
                        .WithMany("SkillProfiles")
                        .HasForeignKey("UserId");

                    b.Navigation("ProfileStudent");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Specialty", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Profession", "Profession")
                        .WithMany("Specialties")
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.StageIdea", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Semester", "Semester")
                        .WithMany("StageIdeas")
                        .HasForeignKey("SemesterId");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.UserXRole", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Role", "Role")
                        .WithMany("UserXRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("UserXRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Blog", b =>
                {
                    b.Navigation("BlogCvs");

                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Idea", b =>
                {
                    b.Navigation("IdeaHistories");

                    b.Navigation("IdeaRequests");

                    b.Navigation("MentorIdeaRequests");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.IdeaHistory", b =>
                {
                    b.Navigation("IdeaHistoryRequests");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Profession", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.ProfileStudent", b =>
                {
                    b.Navigation("SkillProfiles");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Project", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("CapstoneSchedules");

                    b.Navigation("Invitations");

                    b.Navigation("MentorIdeaRequests");

                    b.Navigation("Reviews");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Review", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserXRoles");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Semester", b =>
                {
                    b.Navigation("ProfileStudents");

                    b.Navigation("StageIdeas");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("Ideas");

                    b.Navigation("ProfileStudents");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.StageIdea", b =>
                {
                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TeamMember", b =>
                {
                    b.Navigation("RateBys");

                    b.Navigation("RateFors");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.User", b =>
                {
                    b.Navigation("BlogCvs");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("IdeaHistoryOfCouncils");

                    b.Navigation("IdeaHistoryRequestOfReviewers");

                    b.Navigation("IdeaOfMentors");

                    b.Navigation("IdeaOfOwners");

                    b.Navigation("IdeaOfSubMentors");

                    b.Navigation("IdeaRequestOfReviewers");

                    b.Navigation("InvitationOfReceivers");

                    b.Navigation("InvitationOfSenders");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("ProfileStudent");

                    b.Navigation("ProjectOfLeaders");

                    b.Navigation("Projects");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviewer1s");

                    b.Navigation("Reviewer2s");

                    b.Navigation("SkillProfiles");

                    b.Navigation("TeamMembers");

                    b.Navigation("UserXRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
