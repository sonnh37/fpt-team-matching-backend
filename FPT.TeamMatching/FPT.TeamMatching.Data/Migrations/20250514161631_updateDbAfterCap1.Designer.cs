// <auto-generated />
using System;
using FPT.TeamMatching.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FPT.TeamMatching.Data.Migrations
{
    [DbContext(typeof(FPTMatchingDbContext))]
    [Migration("20250514161631_updateDbAfterCap1")]
    partial class updateDbAfterCap1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.AnswerCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("TopicRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("TopicRequestId");

                    b.ToTable("AnswerCriteria", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillRequired")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.BlogCv", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileCv")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogCv", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CapstoneSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HallName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Stage")
                        .HasColumnType("integer");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CapstoneSchedule", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ValueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Criteria", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CriteriaForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CriteriaForm", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CriteriaXCriteriaForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CriteriaFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaFormId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("CriteriaXCriteriaForm", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invitation", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.MentorFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AchievementLevel")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Limitation")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ThesisContent")
                        .HasColumnType("text");

                    b.Property<string>("ThesisForm")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("MentorFeedback", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.MentorTopicRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TopicId");

                    b.ToTable("MentorTopicRequest", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.NotificationXUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationXUser", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Profession", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.ProfileStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Achievement")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExperienceProject")
                        .HasColumnType("text");

                    b.Property<string>("FileCv")
                        .HasColumnType("text");

                    b.Property<string>("Interest")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfileStudent", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DefenseStage")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TeamCode")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.Property<int?>("TeamSize")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TopicId")
                        .IsUnique();

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<double>("PercentContribution")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("RateById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RateForId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RateById");

                    b.HasIndex("RateForId");

                    b.ToTable("Rate", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyId")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileUpload")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Reviewer1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Reviewer2Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Room")
                        .HasColumnType("text");

                    b.Property<int?>("Slot")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Reviewer1Id");

                    b.HasIndex("Reviewer2Id");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CriteriaFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LimitTopicMentorOnly")
                        .HasColumnType("integer");

                    b.Property<int>("LimitTopicSubMentor")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer");

                    b.Property<int>("MinTeamSize")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTeam")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("OnGoingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("PublicTopicDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SemesterCode")
                        .HasColumnType("text");

                    b.Property<string>("SemesterName")
                        .HasColumnType("text");

                    b.Property<string>("SemesterPrefixName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaFormId");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.SkillProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullSkill")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileStudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileStudentId");

                    b.HasIndex("UserId");

                    b.ToTable("SkillProfile", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SpecialtyName")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Specialty", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.StageTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ResultDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<int>("StageNumber")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("StageTopic", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Attitude")
                        .HasColumnType("text");

                    b.Property<string>("CommentDefense1")
                        .HasColumnType("text");

                    b.Property<string>("CommentDefense2")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LeaveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MentorConclusion")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<string>("EnterpriseName")
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnterpriseTopic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExistedTeam")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecialtyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StageTopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("SubMentorId")
                        .HasColumnType("uuid");

                    b.Property<string>("TopicCode")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VietNameseName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("StageTopicId");

                    b.HasIndex("SubMentorId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CriteriaFormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaFormId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicRequest", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUpdate")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ReviewStage")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicVersion", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicVersionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("TopicVersionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TopicVersionId");

                    b.ToTable("TopicVersionRequest", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Cache")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.UserXRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("UserId");

                    b.ToTable("UserXRole", (string)null);
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.AnswerCriteria", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Criteria", "Criteria")
                        .WithMany("AnswerCriterias")
                        .HasForeignKey("CriteriaId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.TopicRequest", "TopicRequest")
                        .WithMany("AnswerCriterias")
                        .HasForeignKey("TopicRequestId");

                    b.Navigation("Criteria");

                    b.Navigation("TopicRequest");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Blog", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("Blogs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.BlogCv", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Blog", "Blog")
                        .WithMany("BlogCvs")
                        .HasForeignKey("BlogId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("BlogCvs")
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CapstoneSchedule", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("CapstoneSchedules")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Comment", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CriteriaXCriteriaForm", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.CriteriaForm", "CriteriaForm")
                        .WithMany("CriteriaXCriteriaForms")
                        .HasForeignKey("CriteriaFormId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Criteria", "Criteria")
                        .WithMany("CriteriaXCriteriaForms")
                        .HasForeignKey("CriteriaId");

                    b.Navigation("Criteria");

                    b.Navigation("CriteriaForm");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Invitation", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("Invitations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Receiver")
                        .WithMany("InvitationOfReceivers")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Sender")
                        .WithMany("InvitationOfSenders")
                        .HasForeignKey("SenderId");

                    b.Navigation("Project");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Like", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.MentorFeedback", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithOne("MentorFeedback")
                        .HasForeignKey("FPT.TeamMatching.Domain.Entities.MentorFeedback", "ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.MentorTopicRequest", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("MentorTopicRequests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Topic", "Topic")
                        .WithMany("MentorTopicRequests")
                        .HasForeignKey("TopicId");

                    b.Navigation("Project");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Notification", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.NotificationXUser", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationXUsers")
                        .HasForeignKey("NotificationId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("NotificationXUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.ProfileStudent", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Semester", "Semester")
                        .WithMany("ProfileStudents")
                        .HasForeignKey("SemesterId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Specialty", "Specialty")
                        .WithMany("ProfileStudents")
                        .HasForeignKey("SpecialtyId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithOne("ProfileStudent")
                        .HasForeignKey("FPT.TeamMatching.Domain.Entities.ProfileStudent", "UserId");

                    b.Navigation("Semester");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Project", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Leader")
                        .WithMany("Projects")
                        .HasForeignKey("LeaderId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Semester", "Semester")
                        .WithMany("Projects")
                        .HasForeignKey("SemesterId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Topic", "Topic")
                        .WithOne("Project")
                        .HasForeignKey("FPT.TeamMatching.Domain.Entities.Project", "TopicId");

                    b.Navigation("Leader");

                    b.Navigation("Semester");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Rate", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.TeamMember", "RateBy")
                        .WithMany("RateBys")
                        .HasForeignKey("RateById");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.TeamMember", "RateFor")
                        .WithMany("RateFors")
                        .HasForeignKey("RateForId");

                    b.Navigation("RateBy");

                    b.Navigation("RateFor");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Review", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("Reviews")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer1")
                        .WithMany("Reviewer1s")
                        .HasForeignKey("Reviewer1Id");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer2")
                        .WithMany("Reviewer2s")
                        .HasForeignKey("Reviewer2Id");

                    b.Navigation("Project");

                    b.Navigation("Reviewer1");

                    b.Navigation("Reviewer2");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Semester", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.CriteriaForm", "CriteriaForm")
                        .WithMany("Semesters")
                        .HasForeignKey("CriteriaFormId");

                    b.Navigation("CriteriaForm");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.SkillProfile", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.ProfileStudent", "ProfileStudent")
                        .WithMany("SkillProfiles")
                        .HasForeignKey("ProfileStudentId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", null)
                        .WithMany("SkillProfiles")
                        .HasForeignKey("UserId");

                    b.Navigation("ProfileStudent");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Specialty", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Profession", "Profession")
                        .WithMany("Specialties")
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.StageTopic", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Semester", "Semester")
                        .WithMany("StageTopics")
                        .HasForeignKey("SemesterId");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Project", "Project")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Topic", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Mentor")
                        .WithMany("TopicOfMentors")
                        .HasForeignKey("MentorId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Owner")
                        .WithMany("TopicOfOwners")
                        .HasForeignKey("OwnerId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Specialty", "Specialty")
                        .WithMany("Topics")
                        .HasForeignKey("SpecialtyId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.StageTopic", "StageTopic")
                        .WithMany("Topics")
                        .HasForeignKey("StageTopicId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "SubMentor")
                        .WithMany("TopicOfSubMentors")
                        .HasForeignKey("SubMentorId");

                    b.Navigation("Mentor");

                    b.Navigation("Owner");

                    b.Navigation("Specialty");

                    b.Navigation("StageTopic");

                    b.Navigation("SubMentor");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicRequest", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.CriteriaForm", "CriteriaForm")
                        .WithMany("TopicRequests")
                        .HasForeignKey("CriteriaFormId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer")
                        .WithMany("TopicRequestOfReviewers")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Topic", "Topic")
                        .WithMany("TopicRequests")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CriteriaForm");

                    b.Navigation("Reviewer");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicVersion", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Topic", "Topic")
                        .WithMany("TopicVersions")
                        .HasForeignKey("TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicVersionRequest", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "Reviewer")
                        .WithMany("TopicVersionRequestOfReviewers")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.TopicVersion", "TopicVersion")
                        .WithMany("TopicVersionRequests")
                        .HasForeignKey("TopicVersionId");

                    b.Navigation("Reviewer");

                    b.Navigation("TopicVersion");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.UserXRole", b =>
                {
                    b.HasOne("FPT.TeamMatching.Domain.Entities.Role", "Role")
                        .WithMany("UserXRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.Semester", "Semester")
                        .WithMany("UserXRoles")
                        .HasForeignKey("SemesterId");

                    b.HasOne("FPT.TeamMatching.Domain.Entities.User", "User")
                        .WithMany("UserXRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("Semester");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Blog", b =>
                {
                    b.Navigation("BlogCvs");

                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Criteria", b =>
                {
                    b.Navigation("AnswerCriterias");

                    b.Navigation("CriteriaXCriteriaForms");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.CriteriaForm", b =>
                {
                    b.Navigation("CriteriaXCriteriaForms");

                    b.Navigation("Semesters");

                    b.Navigation("TopicRequests");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificationXUsers");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Profession", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.ProfileStudent", b =>
                {
                    b.Navigation("SkillProfiles");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Project", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("CapstoneSchedules");

                    b.Navigation("Invitations");

                    b.Navigation("MentorFeedback");

                    b.Navigation("MentorTopicRequests");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserXRoles");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Semester", b =>
                {
                    b.Navigation("ProfileStudents");

                    b.Navigation("Projects");

                    b.Navigation("StageTopics");

                    b.Navigation("UserXRoles");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("ProfileStudents");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.StageTopic", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TeamMember", b =>
                {
                    b.Navigation("RateBys");

                    b.Navigation("RateFors");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.Topic", b =>
                {
                    b.Navigation("MentorTopicRequests");

                    b.Navigation("Project");

                    b.Navigation("TopicRequests");

                    b.Navigation("TopicVersions");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicRequest", b =>
                {
                    b.Navigation("AnswerCriterias");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.TopicVersion", b =>
                {
                    b.Navigation("TopicVersionRequests");
                });

            modelBuilder.Entity("FPT.TeamMatching.Domain.Entities.User", b =>
                {
                    b.Navigation("BlogCvs");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("InvitationOfReceivers");

                    b.Navigation("InvitationOfSenders");

                    b.Navigation("Likes");

                    b.Navigation("NotificationXUsers");

                    b.Navigation("Notifications");

                    b.Navigation("ProfileStudent");

                    b.Navigation("Projects");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviewer1s");

                    b.Navigation("Reviewer2s");

                    b.Navigation("SkillProfiles");

                    b.Navigation("TeamMembers");

                    b.Navigation("TopicOfMentors");

                    b.Navigation("TopicOfOwners");

                    b.Navigation("TopicOfSubMentors");

                    b.Navigation("TopicRequestOfReviewers");

                    b.Navigation("TopicVersionRequestOfReviewers");

                    b.Navigation("UserXRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
